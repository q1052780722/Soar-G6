function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
 * @Author: moyee
 * @Date: 2019-07-31 14:36:15
 * @LastEditors: moyee
 * @LastEditTime: 2019-08-23 11:13:43
 * @Description: 拖动群组
 */
var _require = require('lodash'),
    merge = _require.merge;

var delegateStyle = {
  fill: '#F3F9FF',
  fillOpacity: 0.5,
  stroke: '#1890FF',
  strokeOpacity: 0.9,
  lineDash: [5, 5]
};
module.exports = {
  getDefaultCfg: function getDefaultCfg() {
    return {
      delegate: true,
      delegateStyle: {},
      delegateShapes: {},
      delegateShapeBBoxs: {}
    };
  },
  getEvents: function getEvents() {
    return {
      dragstart: 'onDragStart',
      drag: 'onDrag',
      dragend: 'onDragEnd'
    };
  },
  onDragStart: function onDragStart(evt) {
    var target = evt.target; // 获取拖动的group的ID，如果拖动的不是group，则直接return

    var groupId = target.get('groupId');

    if (!groupId) {
      return false;
    }

    var graph = this.graph;
    var customGroupControll = graph.get('customGroupControll');
    var customGroup = customGroupControll.customGroup;
    var currentGroup = customGroup[groupId].nodeGroup;
    this.targetGroup = currentGroup;
    var groupOriginBBox = customGroupControll.getGroupOriginBBox(groupId);
    var keyShape = this.targetGroup.get('keyShape');

    if (!groupOriginBBox) {
      customGroupControll.setGroupOriginBBox(groupId, keyShape.getBBox());
    }

    this.mouseOrigin = {
      x: evt.canvasX,
      y: evt.canvasY
    };
    this.nodePoint = []; // 获取groupId的父Group的ID

    var _graph$save = graph.save(),
        groups = _graph$save.groups;

    var parentGroupId = null;

    for (var _iterator = groups, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var group = _ref;

      if (groupId !== group.id) {
        continue;
      }

      parentGroupId = group.parentId;
      break;
    }

    if (parentGroupId) {
      var parentGroup = customGroup[parentGroupId].nodeGroup;
      customGroupControll.setGroupStyle(parentGroup.get('keyShape'), 'hover');
    }
  },
  onDrag: function onDrag(evt) {
    if (!this.mouseOrigin) {
      return false;
    }

    this._updateDelegate(evt);
  },
  onDragEnd: function onDragEnd(evt) {
    // 删除delegate shape
    var groupId = evt.target.get('groupId');

    if (this.delegateShapes[groupId]) {
      this.delegateShapeBBox = this.delegateShapes[groupId].getBBox();
      this.delegateShapes[groupId].remove();
      delete this.delegateShapes[groupId];
    }

    var graph = this.graph;
    var autoPaint = graph.get('autoPaint');
    graph.setAutoPaint(false); // 修改群组位置

    this.updatePosition(evt);
    graph.setAutoPaint(autoPaint);
    graph.paint();
    this.mouseOrigin = null;
    this.shapeOrigin = null; // 在两个节点之间连线时也会执行到这里，此时this.nodePoint值为undefined

    if (this.nodePoint) {
      this.nodePoint.length = 0;
    }

    this.delegateShapeBBox = null;
  },

  /**
   * 更新群组及群组中节点和边的位置
   *
   * @param {Event} evt 事件句柄
   * @return {boolean} false/true
   */
  updatePosition: function updatePosition(evt) {
    if (!this.delegateShapeBBox) {
      return false;
    }

    var graph = this.graph; // 更新群组里面节点和线的位置

    this.updateItemPosition(evt);
    var customGroupControll = graph.get('customGroupControll');
    var customGroup = customGroupControll.customGroup;
    var groupId = evt.target.get('groupId'); // 判断是否拖动出了parent group外面，如果拖出了parent Group外面，则更新数据，去掉group关联
    // 获取groupId的父Group的ID

    var _graph$save2 = graph.save(),
        groups = _graph$save2.groups;

    var parentGroupId = null;
    var parentGroupData = null;

    for (var _iterator2 = groups, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var group = _ref2;

      if (groupId !== group.id) {
        continue;
      }

      parentGroupId = group.parentId;
      parentGroupData = group;
      break;
    }

    if (parentGroupId) {
      var parentGroup = customGroup[parentGroupId].nodeGroup;
      var parentKeyShape = parentGroup.get('keyShape');
      customGroupControll.setGroupStyle(parentKeyShape, 'default');
      var parentGroupBBox = parentKeyShape.getBBox();
      var minX = parentGroupBBox.minX,
          minY = parentGroupBBox.minY,
          maxX = parentGroupBBox.maxX,
          maxY = parentGroupBBox.maxY; // 检查是否拖出了父Group

      var currentGroup = customGroup[groupId].nodeGroup;
      var currentKeyShape = currentGroup.get('keyShape');
      var currentKeyShapeBBox = currentKeyShape.getBBox();
      var x = currentKeyShapeBBox.x,
          y = currentKeyShapeBBox.y;

      if (!(x < maxX && x > minX && y < maxY && y > minY)) {
        // 拖出了parent group，则取消parent group ID
        delete parentGroupData.parentId; // 同时删除groupID中的节点

        var groupNodes = graph.get('groupNodes');
        var currentGroupNodes = groupNodes[groupId];
        var parentGroupNodes = groupNodes[parentGroupId];
        groupNodes[parentGroupId] = parentGroupNodes.filter(function (node) {
          return currentGroupNodes.indexOf(node) === -1;
        });

        var _customGroupControll$ = customGroupControll.calculationGroupPosition(groupNodes[parentGroupId]),
            x1 = _customGroupControll$.x,
            y1 = _customGroupControll$.y,
            width = _customGroupControll$.width,
            height = _customGroupControll$.height;

        var _groups = graph.get('groups');

        var hasSubGroup = !!_groups.filter(function (g) {
          return g.parentId === parentGroupId;
        }).length > 0;
        var r = width > height ? width / 2 : height / 2 + (hasSubGroup ? 20 : 0);
        var cx = (width + 2 * x1) / 2;
        var cy = (height + 2 * y1) / 2; // groupKeyShape.attr('x', cx);
        // groupKeyShape.attr('y', cy);

        parentKeyShape.attr({
          r: r + groupNodes[groupId].length * 10,
          x: cx,
          y: cy
        });
      }
    }
  },

  /**
   * 更新群组中节点、边的位置
   *
   * @param {Event} evt 事件句柄
   */
  updateItemPosition: function updateItemPosition(evt) {
    var _this = this;

    var groupId = evt.target.get('groupId');
    var graph = this.graph; // 获取群组对象

    var customGroupControll = graph.get('customGroupControll');
    var groupNodes = graph.get('groupNodes'); // step 1：先修改groupId中的节点位置

    var nodeInGroup = groupNodes[groupId];
    var groupOriginBBox = customGroupControll.getGroupOriginBBox(groupId);
    var delegateShapeBBoxs = this.delegateShapeBBoxs[groupId];
    var otherGroupId = [];
    nodeInGroup.forEach(function (nodeId, index) {
      var node = graph.findById(nodeId);
      var model = node.getModel();

      if (model.groupId && !otherGroupId.includes(model.groupId)) {
        otherGroupId.push(model.groupId);
      }

      if (!_this.nodePoint[index]) {
        _this.nodePoint[index] = {
          x: model.x,
          y: model.y
        };
      } // 群组拖动后节点的位置：deletateShape的最终位置-群组起始位置+节点位置


      var x = delegateShapeBBoxs.x - groupOriginBBox.x + _this.nodePoint[index].x;
      var y = delegateShapeBBoxs.y - groupOriginBBox.y + _this.nodePoint[index].y;
      _this.nodePoint[index] = {
        x: x,
        y: y
      };
      graph.updateItem(node, {
        x: x,
        y: y
      });
    }); // step 2：修改父group中其他节点的位置
    // 更新完群组位置后，重新设置群组起始位置

    var customGroups = customGroupControll.customGroup; // otherGroupId中是否包括当前groupId，如果不包括，则添加进去

    if (!otherGroupId.includes(groupId)) {
      otherGroupId.push(groupId);
    }

    otherGroupId.forEach(function (id) {
      // 更新群组位置
      var nodeGroup = customGroups[id].nodeGroup;
      var groupKeyShape = nodeGroup.get('keyShape');

      var _customGroupControll$2 = customGroupControll.calculationGroupPosition(groupNodes[id]),
          x = _customGroupControll$2.x,
          y = _customGroupControll$2.y,
          width = _customGroupControll$2.width,
          height = _customGroupControll$2.height;

      var cx = (width + 2 * x) / 2;
      var cy = (height + 2 * y) / 2;
      groupKeyShape.attr('x', cx);
      groupKeyShape.attr('y', cy);
      customGroupControll.setGroupOriginBBox(id, groupKeyShape.getBBox());
    });
  },
  _updateDelegate: function _updateDelegate(evt) {
    var self = this;
    var groupId = evt.target.get('groupId');
    var item = this.targetGroup.get('keyShape');
    var graph = this.graph;
    var autoPaint = graph.get('autoPaint');
    graph.setAutoPaint(false);
    var delegateShape = self.delegateShapes[groupId];
    var groupBbox = item.getBBox();
    var delegateType = item.get('type');

    if (!delegateShape) {
      var delegateGroup = graph.get('delegateGroup');
      var width = groupBbox.width,
          height = groupBbox.height;
      var x = evt.canvasX - width / 2;
      var y = evt.canvasY - height / 2;

      var attrs = _extends({
        width: width,
        height: height,
        x: x,
        y: y
      }, merge({}, delegateStyle, this.delegateStyle)); // 如果delegate是circle


      if (delegateType === 'circle') {
        var cx = evt.canvasX; // (width + 2 * x) / 2;

        var cy = evt.canvasY; // (height + 2 * y) / 2;

        var r = width > height ? width / 2 : height / 2;
        delegateShape = delegateGroup.addShape('circle', {
          attrs: _extends({
            x: cx,
            y: cy,
            r: r
          }, merge({}, delegateStyle, this.delegateStyle))
        });
        self.shapeOrigin = {
          x: cx,
          y: cy
        };
      } else {
        delegateShape = delegateGroup.addShape('rect', {
          attrs: attrs
        });
        self.shapeOrigin = {
          x: attrs.x,
          y: attrs.y
        };
      } // delegateShape.set('capture', false);


      self.delegateShapes[groupId] = delegateShape;
      self.delegateShapeBBoxs[groupId] = delegateShape.getBBox();
    } else {
      var mouseOrigin = self.mouseOrigin,
          shapeOrigin = self.shapeOrigin;
      var deltaX = evt.canvasX - mouseOrigin.x;
      var deltaY = evt.canvasY - mouseOrigin.y;

      var _x = deltaX + shapeOrigin.x;

      var _y = deltaY + shapeOrigin.y; // 将Canvas坐标转成视口坐标


      var point = graph.getPointByCanvas(_x, _y);
      delegateShape.attr({
        x: point.x,
        y: point.y
      });
      self.delegateShapeBBoxs[groupId] = delegateShape.getBBox();
    }

    graph.paint();
    graph.setAutoPaint(autoPaint);
  }
};