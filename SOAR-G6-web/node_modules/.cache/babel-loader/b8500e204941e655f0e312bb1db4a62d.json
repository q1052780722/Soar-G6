{"remainingRequest":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js!D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\command\\index.js","dependencies":[{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\command\\index.js","mtime":1571212572000},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\babel.config.js","mtime":1660367946644},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1659706972251},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1659582234713}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"D:/Go project/WebTest/vue-g6-editor-master/SOAR-G6-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Go project/WebTest/vue-g6-editor-master/SOAR-G6-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"D:/Go project/WebTest/vue-g6-editor-master/SOAR-G6-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { uniqueId } from '@/utils';\n\nvar command = /*#__PURE__*/function () {\n  function command(editor) {\n    _classCallCheck(this, command);\n\n    _defineProperty(this, \"editor\", null);\n\n    _defineProperty(this, \"undoList\", []);\n\n    _defineProperty(this, \"redoList\", []);\n\n    this.editor = editor;\n  }\n\n  _createClass(command, [{\n    key: \"executeCommand\",\n    value: function executeCommand(key, datas) {\n      var _this = this;\n\n      var list = [];\n      datas.map(function (data) {\n        var model = data;\n\n        if (key === 'add') {\n          model.id = data.type + uniqueId();\n        }\n\n        if (key === 'delete') {\n          if (data.getType() === 'node') {\n            var edges = data.getEdges();\n            model = data.getModel();\n            model.type = data.getType();\n            model.id = data.get('id');\n            edges.forEach(function (edge) {\n              var edgeModel = edge.getModel();\n              edgeModel.type = 'edge';\n              edgeModel.id = edge.get('id');\n              list.push(edgeModel);\n            });\n          } else if (data.getType() === 'edge') {\n            model = data.getModel();\n            model.type = data.getType();\n            model.id = data.get('id');\n          }\n        }\n\n        list.push(model);\n\n        _this.doCommand(key, model);\n      });\n      this.undoList.push({\n        key: key,\n        datas: list\n      });\n\n      if (key === 'delete') {\n        this.redoList = [];\n      }\n\n      this.editor.emit(key, {\n        undoList: this.undoList,\n        redoList: this.redoList\n      });\n    }\n  }, {\n    key: \"doCommand\",\n    value: function doCommand(key, data) {\n      switch (key) {\n        case 'add':\n          this.add(data.type, data);\n          break;\n\n        case \"update\":\n          this.update(data.item, data.newModel);\n          break;\n\n        case \"delete\":\n          this.remove(data);\n          break;\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(type, item) {\n      this.editor.add(type, item);\n    }\n  }, {\n    key: \"update\",\n    value: function update(item, model) {\n      this.editor.update(item, model);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      this.editor.remove(item);\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      var undoData = this.undoList.pop();\n      var edgeList = [];\n      var list = [];\n\n      for (var i = 0; i < undoData.datas.length; i++) {\n        var data = undoData.datas[i];\n\n        if (data.type === 'edge') {\n          edgeList.push(data);\n          continue;\n        }\n\n        list.push(data);\n        this.doundo(undoData.key, data);\n      }\n\n      for (var _i = 0; _i < edgeList.length; _i++) {\n        var edge = edgeList[_i];\n\n        if (edge.source.destroyed) {\n          edge.source = edge.sourceId;\n        }\n\n        if (edge.target.destroyed) {\n          edge.target = edge.targetId;\n        }\n\n        list.push(edge);\n        this.doundo(undoData.key, edge);\n      }\n\n      this.redoList.push({\n        key: undoData.key,\n        datas: list\n      });\n      this.editor.emit(undoData.key, {\n        undoList: this.undoList,\n        redoList: this.redoList\n      });\n    }\n  }, {\n    key: \"doundo\",\n    value: function doundo(key, data) {\n      switch (key) {\n        case 'add':\n          this.remove(data);\n          break;\n\n        case \"update\":\n          this.update(data.item, data.oldModel);\n          break;\n\n        case \"delete\":\n          this.add(data.type, data);\n          break;\n      }\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      var redoData = this.redoList.pop();\n      var list = [];\n      var edgeList = [];\n\n      for (var i = 0; i < redoData.datas.length; i++) {\n        var data = redoData.datas[i];\n\n        if (data.type === 'edge') {\n          edgeList.push(data);\n          continue;\n        }\n\n        list.push(data);\n        this.doredo(redoData.key, data);\n      }\n\n      for (var _i2 = 0; _i2 < edgeList.length; _i2++) {\n        var edge = edgeList[_i2];\n\n        if (edge.source.destroyed) {\n          edge.source = edge.sourceId;\n        }\n\n        if (edge.target.destroyed) {\n          edge.target = edge.targetId;\n        }\n\n        list.push(edge);\n        this.doredo(redoData.key, edge);\n      }\n\n      this.undoList.push({\n        key: redoData.key,\n        datas: list\n      });\n      this.editor.emit(redoData.key, {\n        undoList: this.undoList,\n        redoList: this.redoList\n      });\n    }\n  }, {\n    key: \"doredo\",\n    value: function doredo(key, data) {\n      switch (key) {\n        case 'add':\n          this.add(data.type, data);\n          break;\n\n        case \"update\":\n          this.update(data.item, data.newModel);\n          break;\n\n        case \"delete\":\n          this.remove(data);\n          break;\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(item) {\n      this.executeCommand('delete', [item]);\n    }\n  }]);\n\n  return command;\n}();\n\nexport default command;",null]}