{"remainingRequest":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js!D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\components\\Base\\Editor.js","dependencies":[{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\components\\Base\\Editor.js","mtime":1571212572000},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\babel.config.js","mtime":1660367946644},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1659706972251},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1659582234713}],"contextDependencies":[],"result":["import _classCallCheck from \"D:/Go project/WebTest/vue-g6-editor-master/SOAR-G6-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Go project/WebTest/vue-g6-editor-master/SOAR-G6-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { uniqueId } from '@/utils';\nimport eventBus from \"@/utils/eventBus\";\n\nvar Editor = /*#__PURE__*/function () {\n  function Editor() {\n    _classCallCheck(this, Editor);\n\n    this.id = uniqueId();\n  }\n\n  _createClass(Editor, [{\n    key: \"getGrpah\",\n    value: function getGrpah() {\n      return this.graph;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event, params) {\n      if (event === 'afterAddPage') {\n        this.graph = params.graph;\n      }\n\n      eventBus.$emit(event, params);\n    }\n  }, {\n    key: \"on\",\n    value: function on(event) {\n      switch (event) {\n        case 'changeNodeData':\n          this.graph.refresh();\n          break;\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(type, item) {\n      this.graph.add(type, item);\n    }\n  }, {\n    key: \"update\",\n    value: function update(item, model) {\n      this.graph.update(item, model);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      var node = this.graph.findById(item.id);\n      this.graph.remove(node);\n    }\n  }]);\n\n  return Editor;\n}();\n\nexport { Editor as default };",null]}