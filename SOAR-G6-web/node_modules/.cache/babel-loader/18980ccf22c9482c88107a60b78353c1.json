{"remainingRequest":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js!D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\components\\Flow\\customNode.js","dependencies":[{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\components\\Flow\\customNode.js","mtime":1660310523401},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\babel.config.js","mtime":1660367946644},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1659706972251},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1659582234713}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport G6 from \"@antv/g6/build/g6\";\nimport { uniqueId } from '@/utils';\nimport Shape from '@antv/g/src/shapes';\nvar customNode = {\n  init: function init() {\n    G6.registerNode(\"customNode\", {\n      draw: function draw(cfg, group) {\n        var size = cfg.size;\n\n        if (!size) {\n          size = [170, 34];\n        } // 此处必须是NUMBER 不然bbox不正常\n\n\n        var width = parseInt(size[0]);\n        var height = parseInt(size[1]);\n        var color = cfg.color; // 此处必须有偏移 不然drag-node错位\n\n        var offsetX = -width / 2;\n        var offsetY = -height / 2;\n        var mainId = 'rect' + uniqueId();\n        var shape = group.addShape(\"rect\", {\n          attrs: {\n            id: mainId,\n            x: offsetX,\n            y: offsetY,\n            width: width,\n            height: height,\n            stroke: \"#ced4d9\",\n            fill: '#fff',\n            //此处必须有fill 不然不能触发事件\n            radius: 4\n          }\n        });\n        group.addShape(\"rect\", {\n          attrs: {\n            x: offsetX,\n            y: offsetY,\n            width: 4,\n            height: height,\n            fill: color,\n            parent: mainId,\n            radius: [4, 0, 0, 4]\n          }\n        }); //添加阴影\n\n        group.addShape(\"image\", {\n          attrs: {\n            x: offsetX + 16,\n            y: offsetY + 8,\n            width: 20,\n            height: 16,\n            img: cfg.image,\n            parent: mainId\n          }\n        });\n        group.addShape(\"image\", {\n          attrs: {\n            x: offsetX + width - 32,\n            y: offsetY + 8,\n            width: 16,\n            height: 16,\n            parent: mainId,\n            img: cfg.stateImage\n          }\n        });\n\n        if (cfg.backImage) {\n          var clip = new Shape.Rect({\n            attrs: {\n              x: offsetX,\n              y: offsetY,\n              width: width,\n              height: height,\n              fill: '#fff',\n              radius: 4\n            }\n          });\n          group.addShape(\"image\", {\n            attrs: {\n              x: offsetX,\n              y: offsetY,\n              width: width,\n              height: height,\n              img: cfg.backImage,\n              clip: clip\n            }\n          });\n        } //节点上的文字\n\n\n        if (cfg.label) {\n          group.addShape(\"text\", {\n            attrs: {\n              id: 'label' + uniqueId(),\n              x: offsetX + width / 2,\n              y: offsetY + height / 2,\n              textAlign: \"center\",\n              textBaseline: \"middle\",\n              text: cfg.label,\n              parent: mainId,\n              fill: \"#565758\"\n            }\n          });\n        } //连接节点：输入点\n\n\n        if (cfg.inPoints) {\n          for (var i = 0; i < cfg.inPoints.length; i++) {\n            var x = void 0,\n                y = 0; //0为顶 1为底\n\n            if (cfg.inPoints[i][0] === 0) {\n              y = 0;\n            } else {\n              y = height;\n            } //x,y是上面连接点的x坐标\n            //test ok! 通过下两句可以将连接点改到左右\n            // x=0;  输入输出点同理\n            // y=height/2;\n            //test! \n\n\n            x = width * cfg.inPoints[i][1];\n            var id = 'circle' + uniqueId(); //连接点的阴影\n\n            group.addShape(\"circle\", {\n              attrs: {\n                id: 'circle' + uniqueId(),\n                parent: id,\n                x: x + offsetX,\n                y: y + offsetY,\n                r: 10,\n                isInPointOut: true,\n                fill: \"#1890ff\",\n                opacity: 0\n              }\n            });\n            group.addShape(\"circle\", {\n              attrs: {\n                id: id,\n                x: x + offsetX,\n                y: y + offsetY,\n                r: 3,\n                isInPoint: true,\n                fill: \"#fff\",\n                stroke: \"#1890ff\",\n                opacity: 0\n              }\n            });\n          }\n        }\n\n        if (cfg.outPoints) {\n          for (var _i = 0; _i < cfg.outPoints.length; _i++) {\n            var _x = void 0,\n                _y = 0; //0为顶 1为底\n\n\n            if (cfg.outPoints[_i][0] === 0) {\n              _y = 0;\n            } else {\n              _y = height;\n            } // test ok 可以通过下面两句将连接点改到左右\n            // x=width;\n            // y=height/2;\n            //test\n\n\n            _x = width * cfg.outPoints[_i][1];\n\n            var _id = 'circle' + uniqueId();\n\n            group.addShape(\"circle\", {\n              attrs: {\n                id: 'circle' + uniqueId(),\n                parent: _id,\n                x: _x + offsetX,\n                y: _y + offsetY,\n                r: 10,\n                isOutPointOut: true,\n                fill: \"#1890ff\",\n                opacity: 0 //默認0 需要時改成0.3\n\n              }\n            });\n            group.addShape(\"circle\", {\n              attrs: {\n                id: _id,\n                x: _x + offsetX,\n                y: _y + offsetY,\n                r: 3,\n                isOutPoint: true,\n                fill: \"#fff\",\n                stroke: \"#1890ff\",\n                opacity: 0\n              }\n            });\n          }\n        } //group.sort()\n        // 添加文本、更多图形\n\n\n        return shape;\n      },\n      //设置状态\n      setState: function setState(name, value, item) {\n        var group = item.getContainer();\n        var shape = group.get(\"children\")[0]; // 顺序根据 draw 时确定\n\n        var children = group.findAll(function (g) {\n          return g._attrs.parent === shape._attrs.id;\n        });\n        var circles = group.findAll(function (circle) {\n          return circle._attrs.isInPoint || circle._attrs.isOutPoint;\n        });\n\n        var selectStyles = function selectStyles() {\n          shape.attr(\"fill\", \"#f3f9ff\");\n          shape.attr(\"stroke\", \"#6ab7ff\");\n          shape.attr(\"cursor\", \"move\");\n          children.forEach(function (child) {\n            child.attr(\"cursor\", \"move\");\n          });\n          circles.forEach(function (circle) {\n            circle.attr('opacity', 1);\n          });\n        };\n\n        var unSelectStyles = function unSelectStyles() {\n          shape.attr(\"fill\", \"#fff\");\n          shape.attr(\"stroke\", \"#ced4d9\");\n          circles.forEach(function (circle) {\n            circle.attr('opacity', 0);\n          });\n        };\n\n        switch (name) {\n          case \"selected\":\n          case \"hover\":\n            if (value) {\n              selectStyles();\n            } else {\n              unSelectStyles();\n            }\n\n            break;\n        }\n      }\n    });\n  }\n};\nexport default customNode;",null]}