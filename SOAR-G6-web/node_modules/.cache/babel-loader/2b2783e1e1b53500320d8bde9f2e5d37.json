{"remainingRequest":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js!D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\behavior\\add-edge.js","dependencies":[{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\behavior\\add-edge.js","mtime":1571212572000},{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\babel.config.js","mtime":1660367946644},{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1659582234713}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport eventBus from \"@/utils/eventBus\";\nimport { uniqueId } from '@/utils';\nvar startPoint = null;\nvar startItem = null;\nvar endPoint = {};\nvar activeItem = null;\nvar curInPoint = null;\nexport default {\n  getEvents: function getEvents() {\n    return {\n      mousemove: 'onMousemove',\n      mouseup: 'onMouseup',\n      'node:mouseover': 'onMouseover',\n      'node:mouseleave': 'onMouseleave'\n    };\n  },\n  onMouseup: function onMouseup(e) {\n    var item = e.item;\n\n    if (item && item.getType() === 'node') {\n      var group = item.getContainer();\n\n      if (e.target._attrs.isInPoint) {\n        var children = group._cfg.children;\n        children.map(function (child) {\n          if (child._attrs.isInPointOut && child._attrs.parent === e.target._attrs.id) {\n            activeItem = child;\n          }\n        });\n        curInPoint = e.target;\n      } else if (e.target._attrs.isInPointOut) {\n        activeItem = e.target;\n        var _children = group._cfg.children;\n\n        _children.map(function (child) {\n          if (child._attrs.isInPoint && child._attrs.id === e.target._attrs.parent) {\n            curInPoint = child;\n          }\n        });\n      }\n\n      if (activeItem) {\n        var endX = parseInt(curInPoint._attrs.x);\n        var endY = parseInt(curInPoint._attrs.y);\n        endPoint = {\n          x: endX,\n          y: endY\n        };\n\n        if (this.edge) {\n          this.graph.removeItem(this.edge);\n          var model = {\n            id: 'edge' + uniqueId(),\n            source: startItem,\n            target: item,\n            sourceId: startItem._cfg.id,\n            targetId: item._cfg.id,\n            start: startPoint,\n            end: endPoint,\n            shape: 'customEdge',\n            type: 'edge'\n          };\n          eventBus.$emit('addItem', model);\n        }\n      } else {\n        if (this.edge) this.graph.removeItem(this.edge);\n      }\n    } else {\n      if (this.edge) this.graph.removeItem(this.edge);\n    }\n\n    this.graph.find(\"node\", function (node) {\n      var group = node.get('group');\n      var children = group._cfg.children;\n      children.map(function (child) {\n        if (child._attrs.isInPointOut) {\n          child.attr(\"opacity\", \"0\");\n        }\n\n        if (child._attrs.isInPoint) {\n          child.attr(\"opacity\", \"0\");\n        }\n\n        if (child._attrs.isOutPoint) {\n          child.attr(\"opacity\", \"0\");\n          child.attr(\"fill\", \"#fff\");\n        }\n      });\n    });\n\n    if (startItem) {\n      this.graph.setItemState(startItem, 'hover', false);\n    }\n\n    this.graph.paint();\n    startPoint = null;\n    startItem = null;\n    endPoint = {};\n    activeItem = null;\n    curInPoint = null;\n    this.graph.setMode('default');\n  },\n  onMousemove: function onMousemove(e) {\n    var item = e.item;\n\n    if (!startPoint) {\n      this.graph.find(\"node\", function (node) {\n        var group = node.get('group');\n        var children = group._cfg.children;\n        children.map(function (child) {\n          if (child._attrs.isInPointOut) {\n            child.attr(\"opacity\", \"0.3\");\n          }\n\n          if (child._attrs.isInPoint) {\n            child.attr(\"opacity\", \"1\");\n          }\n        });\n      });\n      var startX = parseInt(e.target._attrs.x);\n      var startY = parseInt(e.target._attrs.y);\n      startPoint = {\n        x: startX,\n        y: startY\n      };\n      startItem = item;\n      this.edge = this.graph.addItem('edge', {\n        source: item,\n        target: item,\n        start: startPoint,\n        end: startPoint,\n        shape: 'link-edge'\n      });\n    } else {\n      var point = {\n        x: e.x,\n        y: e.y\n      };\n\n      if (this.edge) {\n        // 增加边的过程中，移动时边跟着移动\n        this.graph.updateItem(this.edge, {\n          //  start: startPoint,\n          target: point\n        });\n      }\n    }\n  },\n  onMouseover: function onMouseover(e) {\n    var item = e.item;\n\n    if (item && item.getType() === 'node') {\n      if (e.target._attrs.isInPointOut && !this.hasTran) {\n        this.hasTran = true;\n        e.target.transform([['t', 0, 3], ['s', 1.2, 1.2]]);\n      }\n\n      this.graph.paint();\n    }\n  },\n  onMouseleave: function onMouseleave() {\n    this.graph.find(\"node\", function (node) {\n      var group = node.get('group');\n      var children = group._cfg.children;\n      children.map(function (child) {\n        if (child._attrs.isInPointOut) {\n          child.resetMatrix();\n        }\n      });\n    });\n    this.hasTran = false;\n    this.graph.paint();\n  }\n};",null]}