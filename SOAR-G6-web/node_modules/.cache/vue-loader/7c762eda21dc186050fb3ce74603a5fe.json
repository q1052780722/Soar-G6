{"remainingRequest":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\components\\Toolbar\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\src\\components\\Toolbar\\index.vue","mtime":1660982796990},{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1659582234713},{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\GoProject\\WebTest\\vue-g6-editor-master\\SOAR-G6-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1659706998091}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport eventBus from \"@/utils/eventBus\";\nimport Util from \"@antv/g6/src/util\";\nimport { uniqueId, getBox } from \"@/utils\";\nexport default {\r\n  \n  data() {\n    return {\r\n\t  //剧本相关\t\r\n\t  json:{}, \r\n\t  playbook:\"123\",\r\n\t \r\n\t  \r\n\t  page: {},\n      graph: {},\n      redoList: [],\n      undoList: [],\n      editor: null,\n      command: null,\n      selectedItem: null,\n      multiSelect: false,\n      addGroup: false\n    };\n  },\n  created() {\n    this.init();\n    this.bindEvent();\n  },\n  watch: {\n    selectedItem(val) {\n      if (val && val.length > 1) {\n        this.addGroup = true;\n      } else {\n        this.addGroup = false;\n      }\n    }\n  },\n  methods: {\r\n\topen() {\r\n\t    this.$alert(this.playbook, '剧本展示', {\r\n\t    confirmButtonText: '确定',\r\n\t\t});\r\n\t},\n    init() {\n      const { editor, command } = this.$parent;\n      this.editor = editor;\n      this.command = command;\n    },\n    bindEvent() {\n      let self = this;\n      eventBus.$on(\"afterAddPage\", page => {\n        self.page = page;\n        self.graph = self.page.graph;\n      });\n      eventBus.$on(\"add\", data => {\n        this.redoList = data.redoList;\n        this.undoList = data.undoList;\n      });\n       eventBus.$on(\"update\", data => {\n        this.redoList = data.redoList;\n        this.undoList = data.undoList;\n      });\n       eventBus.$on(\"delete\", data => {\n        this.redoList = data.redoList;\n        this.undoList = data.undoList;\n      });\n      eventBus.$on(\"updateItem\", item => {\n        this.command.executeCommand(\"update\", [item]);\n      });\n      eventBus.$on(\"addItem\", item => {\n        this.command.executeCommand(\"add\", [item]);\n      });\n      eventBus.$on(\"nodeselectchange\", () => {\n        this.selectedItem = this.graph.findAllByState(\"node\", \"selected\");\n        this.selectedItem = this.selectedItem.concat(\n          ...this.graph.findAllByState(\"edge\", \"selected\")\n        );\n      });\n      eventBus.$on(\"deleteItem\", () => {\n        this.handleDelete();\n      });\n      eventBus.$on(\"muliteSelectEnd\", () => {\n        this.multiSelect = false;\n        this.selectedItem = this.graph.findAllByState(\"node\", \"selected\");\n      });\n    },\n    handleUndo() {\n      if (this.undoList.length > 0) this.command.undo();\n    },\n    handleRedo() {\n      if (this.redoList.length > 0) this.command.redo();\n    },\n    handleDelete() {\n      if (this.selectedItem.length > 0) {\n        this.command.executeCommand(\"delete\", this.selectedItem);\n        this.selectedItem = null;\n      }\n    },\n    getFormatPadding() {\n      return Util.formatPadding(this.graph.get(\"fitViewPadding\"));\n    },\n    getViewCenter() {\n      const padding = this.getFormatPadding();\n      const graph = this.graph;\n      const width = this.graph.get(\"width\");\n      const height = graph.get(\"height\");\n      return {\n        x: (width - padding[2] - padding[3]) / 2 + padding[3],\n        y: (height - padding[0] - padding[2]) / 2 + padding[0]\n      };\n    },\n    handleZoomIn() {\n      const currentZoom = this.graph.getZoom();\n      this.graph.zoomTo(currentZoom + 0.5, this.getViewCenter());\n    },\n    handleZoomOut() {\n      const currentZoom = this.graph.getZoom();\n      this.graph.zoomTo(currentZoom - 0.5, this.getViewCenter());\n    },\n    handleToBack() {\n      if (this.selectedItem && this.selectedItem.length > 0) {\n        this.selectedItem.forEach(item => {\n          item.toBack();\n          this.graph.paint();\n        });\n      }\n    },\n    handleToFront() {\n      if (this.selectedItem && this.selectedItem.length > 0) {\n        this.selectedItem.forEach(item => {\n          if (item.getType() === \"edge\") {\n            // const nodeGroup = this.graph.get(\"nodeGroup\");\n            // const edgeGroup = item.get(\"group\");\n            // nodeGroup.toFront();\n            // edgeGroup.toFront()\n          } else {\n            item.toFront();\n          }\n\n          this.graph.paint();\n        });\n      }\n    },\n    handleAutoZoom() {\n      this.graph.fitView(20);\n    },\n    handleResetZoom() {\n      this.graph.zoomTo(1, this.getViewCenter());\n    },\n    handleMuiltSelect() {\n      this.multiSelect = true;\n      this.graph.setMode(\"mulitSelect\");\n    },\n    handleAddGroup() {\n      //TODO 这部分等阿里更新Group之后添加\n      // const model = {\n      //   id: \"group\" + uniqueId(),\n      //   title: \"新建分组\"\n      // };\n      // // this.command.executeCommand(\"add\", \"group\", model);\n      // this.selectedItem.forEach(item => {\n      //   console.log(item);\n      // });\n  \n      //this.getPosition(this.selectedItem);\n    },\n    getPosition(items) {\n      const boxList = [];\n      items.forEach(item => {\n        const box = item.getBBox();\n        boxList.push(getBox(box.x, box.y, box.width, box.height));\n      });\n      let minX1, minY1, MaxX2, MaxY2;\n      boxList.forEach(box => {\n        if (typeof minX1 == \"undefined\") {\n          minX1 = box.x1;\n        }\n        if (typeof minY1 == \"undefined\") {\n          minY1 = box.y1;\n        }\n        if (typeof MaxX2 == \"undefined\") {\n          MaxX2 = box.x2;\n        }\n        if (typeof MaxY2 == \"undefined\") {\n          MaxY2 = box.y2;\n        }\n        if (minX1 > box.x1) {\n          minX1 = box.x1;\n        }\n        if (minY1 > box.y1) {\n          minY1 = box.y1;\n        }\n        if (MaxX2 < box.x2) {\n          MaxX2 = box.x2;\n        }\n        if (MaxY2 < box.y2) {\n          MaxY2 = box.y2;\n        }\n      });\n      const width = MaxX2 - minX1,\n        height = MaxY2 - minY1,\n        x = minX1 + width / 2,\n        y = minY1 + height / 2,\n        id = \"team\" + uniqueId();\n      const model = {\n        id: id,\n        width,\n        height,\n        x,\n        y,\n        shape: \"teamNode\"\n      };\n      this.command.executeCommand(\"add\", model);\n      // const item = this.graph.findById(id);\n      // item.get(\"group\").toBack();\n      // const edgeGroup = this.graph.get(\"edgeGroup\");\n      // edgeGroup.toFront();\n      // this.graph.paint();\n    },\n\n    consoleData() {\r\n\t// this.TestAddGraphFromJson()\n    console.log(this.graph.save());\n    },\r\n\t//将剧本交给上级组件G6Editor，由上级组件来实现剧本展示\r\n\ttransferPlaybook(){\r\n\t\tthis.$emit('transferPlaybook',this.playbook);\r\n\t\tconsole.log(this.playbook);\r\n\t},\r\n\t// 测试加入节点\r\n\tTestAddPoint(){\r\n\t\t\t // let data={\r\n\t\t\t\t//  olor:\"#1890ff\",\r\n\t\t\t\t// \tid:\"node2\",\r\n\t\t\t\t// \timage:\"https://gw.alipayobjects.com/zos/rmsportal/czNEJAmyDpclFaSucYWB.svg\",\r\n\t\t\t\t// \tinPoints:[0,0.5],\r\n\t\t\t\t// \tlabel:\"测试节点\"                                                            ,\r\n\t\t\t\t// \tname:\"测试节点\"                                                               ,\r\n\t\t\t\t// \toffsetX:55                                                                     ,\r\n\t\t\t\t// \toffsetY:24                                                                     ,\r\n\t\t\t\t// \toutPoints:[1,0.5]                                                         ,\r\n\t\t\t\t// \tshape:\"customNode\"                                                             ,\r\n\t\t\t\t// \tsize:[170,34]                                                                  ,\r\n\t\t\t\t// \tstateImage:\"/static/img/ok.463ab0e4.svg\"                                       ,\r\n\t\t\t\t// \ttype:\"node\"                                                                    ,\r\n\t\t\t\t// \tx:187                                                                          ,\r\n\t\t\t\t// \ty:121                                                                          ,\r\n\t\t\t // };\r\n\t\t\t // this.graph.read()\r\n\t\t\t this.command.executeCommand(\"add\", [data]);\r\n\t\t\t \r\n\t},\r\n  },\r\n  mounted(){\r\n\t  var that=this;\r\n\t  this.$axios.get(\"http://192.168.12.137:8080/playbook/\"+this.$route.params.num)\r\n\t  \t\t.then((response)=>{\r\n\t  \t\t\t\tvar data2=JSON.parse(response.data.json);\r\n\t  \t\t\t\t//存储json、playbook在data()数据中\r\n\t\t\t\t\tthat.json=data2;\r\n\t\t\t\t\tthat.playbook=response.data.playbook;\r\n\t\t\t\t\t// 根据json改变可视化图\r\n\t\t\t\t\tthat.graph.read(data2);\r\n\t  \t\t},(err)=>{\r\n\t  \t\t\tconsole.log(err);\r\n\t  \t\t})\r\n\t\t\t\r\n  },\n};\n",null]}