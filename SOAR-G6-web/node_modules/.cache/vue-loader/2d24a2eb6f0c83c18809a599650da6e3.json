{"remainingRequest":"D:\\Go project\\WebTest\\vue-g6-editor-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Go project\\WebTest\\vue-g6-editor-master\\src\\components\\Toolbar\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\src\\components\\Toolbar\\index.vue","mtime":1660308703869},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1659582234713},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660287995665},{"path":"D:\\Go project\\WebTest\\vue-g6-editor-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1659706998091}],"contextDependencies":[],"result":["\nimport eventBus from \"@/utils/eventBus\";\nimport Util from \"@antv/g6/src/util\";\nimport { uniqueId, getBox } from \"@/utils\";\nexport default {\n  data() {\n    return {\n      page: {},\n      graph: {},\n      redoList: [],\n      undoList: [],\n      editor: null,\n      command: null,\n      selectedItem: null,\n      multiSelect: false,\n      addGroup: false\n    };\n  },\n  created() {\n    this.init();\n    this.bindEvent();\n  },\n  watch: {\n    selectedItem(val) {\n      if (val && val.length > 1) {\n        this.addGroup = true;\n      } else {\n        this.addGroup = false;\n      }\n    }\n  },\n  methods: {\n    init() {\n      const { editor, command } = this.$parent;\n      this.editor = editor;\n      this.command = command;\n    },\n    bindEvent() {\n      let self = this;\n      eventBus.$on(\"afterAddPage\", page => {\n        self.page = page;\n        self.graph = self.page.graph;\n      });\n      eventBus.$on(\"add\", data => {\n        this.redoList = data.redoList;\n        this.undoList = data.undoList;\n      });\n       eventBus.$on(\"update\", data => {\n        this.redoList = data.redoList;\n        this.undoList = data.undoList;\n      });\n       eventBus.$on(\"delete\", data => {\n        this.redoList = data.redoList;\n        this.undoList = data.undoList;\n      });\n      eventBus.$on(\"updateItem\", item => {\n        this.command.executeCommand(\"update\", [item]);\n      });\n      eventBus.$on(\"addItem\", item => {\n        this.command.executeCommand(\"add\", [item]);\n      });\n      eventBus.$on(\"nodeselectchange\", () => {\n        this.selectedItem = this.graph.findAllByState(\"node\", \"selected\");\n        this.selectedItem = this.selectedItem.concat(\n          ...this.graph.findAllByState(\"edge\", \"selected\")\n        );\n      });\n      eventBus.$on(\"deleteItem\", () => {\n        this.handleDelete();\n      });\n      eventBus.$on(\"muliteSelectEnd\", () => {\n        this.multiSelect = false;\n        this.selectedItem = this.graph.findAllByState(\"node\", \"selected\");\n      });\n    },\n    handleUndo() {\n      if (this.undoList.length > 0) this.command.undo();\n    },\n    handleRedo() {\n      if (this.redoList.length > 0) this.command.redo();\n    },\n    handleDelete() {\n      if (this.selectedItem.length > 0) {\n        this.command.executeCommand(\"delete\", this.selectedItem);\n        this.selectedItem = null;\n      }\n    },\n    getFormatPadding() {\n      return Util.formatPadding(this.graph.get(\"fitViewPadding\"));\n    },\n    getViewCenter() {\n      const padding = this.getFormatPadding();\n      const graph = this.graph;\n      const width = this.graph.get(\"width\");\n      const height = graph.get(\"height\");\n      return {\n        x: (width - padding[2] - padding[3]) / 2 + padding[3],\n        y: (height - padding[0] - padding[2]) / 2 + padding[0]\n      };\n    },\n    handleZoomIn() {\n      const currentZoom = this.graph.getZoom();\n      this.graph.zoomTo(currentZoom + 0.5, this.getViewCenter());\n    },\n    handleZoomOut() {\n      const currentZoom = this.graph.getZoom();\n      this.graph.zoomTo(currentZoom - 0.5, this.getViewCenter());\n    },\n    handleToBack() {\n      if (this.selectedItem && this.selectedItem.length > 0) {\n        this.selectedItem.forEach(item => {\n          item.toBack();\n          this.graph.paint();\n        });\n      }\n    },\n    handleToFront() {\n      if (this.selectedItem && this.selectedItem.length > 0) {\n        this.selectedItem.forEach(item => {\n          if (item.getType() === \"edge\") {\n            // const nodeGroup = this.graph.get(\"nodeGroup\");\n            // const edgeGroup = item.get(\"group\");\n            // nodeGroup.toFront();\n            // edgeGroup.toFront()\n          } else {\n            item.toFront();\n          }\n\n          this.graph.paint();\n        });\n      }\n    },\n    handleAutoZoom() {\n      this.graph.fitView(20);\n    },\n    handleResetZoom() {\n      this.graph.zoomTo(1, this.getViewCenter());\n    },\n    handleMuiltSelect() {\n      this.multiSelect = true;\n      this.graph.setMode(\"mulitSelect\");\n    },\n    handleAddGroup() {\n      //TODO 这部分等阿里更新Group之后添加\n      // const model = {\n      //   id: \"group\" + uniqueId(),\n      //   title: \"新建分组\"\n      // };\n      // // this.command.executeCommand(\"add\", \"group\", model);\n      // this.selectedItem.forEach(item => {\n      //   console.log(item);\n      // });\n  \n      //this.getPosition(this.selectedItem);\n    },\n    getPosition(items) {\n      const boxList = [];\n      items.forEach(item => {\n        const box = item.getBBox();\n        boxList.push(getBox(box.x, box.y, box.width, box.height));\n      });\n      let minX1, minY1, MaxX2, MaxY2;\n      boxList.forEach(box => {\n        if (typeof minX1 == \"undefined\") {\n          minX1 = box.x1;\n        }\n        if (typeof minY1 == \"undefined\") {\n          minY1 = box.y1;\n        }\n        if (typeof MaxX2 == \"undefined\") {\n          MaxX2 = box.x2;\n        }\n        if (typeof MaxY2 == \"undefined\") {\n          MaxY2 = box.y2;\n        }\n        if (minX1 > box.x1) {\n          minX1 = box.x1;\n        }\n        if (minY1 > box.y1) {\n          minY1 = box.y1;\n        }\n        if (MaxX2 < box.x2) {\n          MaxX2 = box.x2;\n        }\n        if (MaxY2 < box.y2) {\n          MaxY2 = box.y2;\n        }\n      });\n      const width = MaxX2 - minX1,\n        height = MaxY2 - minY1,\n        x = minX1 + width / 2,\n        y = minY1 + height / 2,\n        id = \"team\" + uniqueId();\n      const model = {\n        id: id,\n        width,\n        height,\n        x,\n        y,\n        shape: \"teamNode\"\n      };\n      this.command.executeCommand(\"add\", model);\n      // const item = this.graph.findById(id);\n      // item.get(\"group\").toBack();\n      // const edgeGroup = this.graph.get(\"edgeGroup\");\n      // edgeGroup.toFront();\n      // this.graph.paint();\n    },\n\n    consoleData() {\r\n\t// this.TestAddGraphFromJson()\n      console.log(this.graph.save());\n    },\r\n\t\r\n\t// 测试加入节点\r\n\tTestAddPoint(){\r\n\t\t\t // let data={\r\n\t\t\t\t//  olor:\"#1890ff\",\r\n\t\t\t\t// \tid:\"node2\",\r\n\t\t\t\t// \timage:\"https://gw.alipayobjects.com/zos/rmsportal/czNEJAmyDpclFaSucYWB.svg\",\r\n\t\t\t\t// \tinPoints:[0,0.5],\r\n\t\t\t\t// \tlabel:\"测试节点\"                                                            ,\r\n\t\t\t\t// \tname:\"测试节点\"                                                               ,\r\n\t\t\t\t// \toffsetX:55                                                                     ,\r\n\t\t\t\t// \toffsetY:24                                                                     ,\r\n\t\t\t\t// \toutPoints:[1,0.5]                                                         ,\r\n\t\t\t\t// \tshape:\"customNode\"                                                             ,\r\n\t\t\t\t// \tsize:[170,34]                                                                  ,\r\n\t\t\t\t// \tstateImage:\"/static/img/ok.463ab0e4.svg\"                                       ,\r\n\t\t\t\t// \ttype:\"node\"                                                                    ,\r\n\t\t\t\t// \tx:187                                                                          ,\r\n\t\t\t\t// \ty:121                                                                          ,\r\n\t\t\t // };\r\n\t\t\t // this.graph.read()\r\n\t\t\t this.command.executeCommand(\"add\", [data]);\r\n\t\t\t \r\n\t},\n\t//测试从保存的图中加入 ok!\r\n\tTestAddGraphFromJson(){\r\n\t \r\n\t   let data={\n    \"nodes\": [\n        {\n            \"name\": \"测试节点\",\n            \"label\": \"测试节点\",\n            \"size\": [\n                \"170\",\n                \"34\"\n            ],\n            \"type\": \"node\",\n            \"x\": 375,\n            \"y\": 38.000579833984375,\n            \"shape\": \"customNode\",\n            \"color\": \"#1890ff\",\n            \"image\": \"https://gw.alipayobjects.com/zos/rmsportal/czNEJAmyDpclFaSucYWB.svg\",\n            \"stateImage\": \"/static/img/ok.463ab0e4.svg\",\n            \"inPoints\": [\n                [\n                    0,\n                    0.5\n                ]\n            ],\n            \"outPoints\": [\n                [\n                    1,\n                    0.5\n                ]\n            ],\n            \"offsetX\": 79,\n            \"offsetY\": 20,\n            \"id\": \"node2\"\n        },\n        {\n            \"name\": \"测试节点\",\n            \"label\": \"测试节点\",\n            \"size\": [\n                \"170\",\n                \"34\"\n            ],\n            \"type\": \"node\",\n            \"x\": 175.2,\n            \"y\": 116.28946872287328,\n            \"shape\": \"customNode\",\n            \"color\": \"#1890ff\",\n            \"image\": \"https://gw.alipayobjects.com/zos/rmsportal/czNEJAmyDpclFaSucYWB.svg\",\n            \"stateImage\": \"/static/img/ok.463ab0e4.svg\",\n            \"inPoints\": [\n                [\n                    0,\n                    0.5\n                ]\n            ],\n            \"outPoints\": [\n                [\n                    1,\n                    0.5\n                ]\n            ],\n            \"offsetX\": 47,\n            \"offsetY\": 18,\n            \"id\": \"node9\"\n        },\n        {\n            \"name\": \"测试节点\",\n            \"label\": \"测试节点\",\n            \"size\": [\n                \"170\",\n                \"34\"\n            ],\n            \"type\": \"node\",\n            \"x\": 528.1777777777777,\n            \"y\": 106.73391316731771,\n            \"shape\": \"customNode\",\n            \"color\": \"#1890ff\",\n            \"image\": \"https://gw.alipayobjects.com/zos/rmsportal/czNEJAmyDpclFaSucYWB.svg\",\n            \"stateImage\": \"/static/img/ok.463ab0e4.svg\",\n            \"inPoints\": [\n                [\n                    0,\n                    0.5\n                ]\n            ],\n            \"outPoints\": [\n                [\n                    1,\n                    0.5\n                ]\n            ],\n            \"offsetX\": 80,\n            \"offsetY\": 26,\n            \"id\": \"node16\"\n        },\n        {\n            \"name\": \"测试节点\",\n            \"label\": \"测试节点\",\n            \"size\": [\n                \"170\",\n                \"34\"\n            ],\n            \"type\": \"node\",\n            \"x\": 788.4444444444446,\n            \"y\": 115.26724650065103,\n            \"shape\": \"customNode\",\n            \"color\": \"#1890ff\",\n            \"image\": \"https://gw.alipayobjects.com/zos/rmsportal/czNEJAmyDpclFaSucYWB.svg\",\n            \"stateImage\": \"/static/img/ok.463ab0e4.svg\",\n            \"inPoints\": [\n                [\n                    0,\n                    0.5\n                ]\n            ],\n            \"outPoints\": [\n                [\n                    1,\n                    0.5\n                ]\n            ],\n            \"offsetX\": 87,\n            \"offsetY\": 23,\n            \"id\": \"node84\"\n        }\n    ],\n    \"edges\": [\n        {\n            \"id\": \"edge61\",\n            \"source\": \"node2\",\n            \"target\": \"node9\",\n            \"sourceId\": \"node2\",\n            \"targetId\": \"node9\",\n            \"start\": {\n                \"x\": 0,\n                \"y\": 17\n            },\n            \"end\": {\n                \"x\": 0,\n                \"y\": -17\n            },\n            \"shape\": \"customEdge\",\n            \"type\": \"edge\",\n            \"startPoint\": {\n                \"x\": 330.33848992336084,\n                \"y\": 55.500579833984375\n            },\n            \"endPoint\": {\n                \"x\": 219.86151007663918,\n                \"y\": 98.78946872287328\n            }\n        },\n        {\n            \"id\": \"edge82\",\n            \"source\": \"node2\",\n            \"target\": \"node16\",\n            \"sourceId\": \"node2\",\n            \"targetId\": \"node16\",\n            \"start\": {\n                \"x\": 0,\n                \"y\": 17\n            },\n            \"end\": {\n                \"x\": 0,\n                \"y\": -17\n            },\n            \"shape\": \"customEdge\",\n            \"type\": \"edge\",\n            \"startPoint\": {\n                \"x\": 414.0001616553508,\n                \"y\": 55.500579833984375\n            },\n            \"endPoint\": {\n                \"x\": 489.1776161224269,\n                \"y\": 89.23391316731771\n            }\n        },\n        {\n            \"id\": \"edge123\",\n            \"source\": \"node16\",\n            \"target\": \"node84\",\n            \"sourceId\": \"node16\",\n            \"targetId\": \"node84\",\n            \"start\": {\n                \"x\": 0,\n                \"y\": 17\n            },\n            \"end\": {\n                \"x\": 0,\n                \"y\": -17\n            },\n            \"shape\": \"customEdge\",\n            \"type\": \"edge\",\n            \"startPoint\": {\n                \"x\": 613.6777777777777,\n                \"y\": 109.5371918558423\n            },\n            \"endPoint\": {\n                \"x\": 702.9444444444446,\n                \"y\": 112.46396781212644\n            }\n        }\n    ],\n    \"groups\": []\n}\r\n\t\t\r\n\t\t\r\n\t\tthis.graph.read(data);\r\n\t}\r\n  }\n};\n",null]}